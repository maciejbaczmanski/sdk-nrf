#
# Copyright (c) 2021 - 2023 Nordic Semiconductor
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

#
# File including instructions to build PSA crypto APIs.
#
# This is executed both in NCS (NS, secure only) build of Mbed TLS as
# well as TF-M build
#
# The Mbed TLS configuration MBEDTLS_PSA_CRYPTO_SPM used to check if this is
# used inside a TF-M build.

# The interface is only generated in the NS image if TF-M is used
include(${NRF_SECURITY_ROOT}/cmake/generate_configs.cmake)
generate_mbedcrypto_interface_configs()
generate_mbedcrypto_library_configs()


# Add include folders for psa_crypto_config (interface builds)
target_include_directories(psa_crypto_config
  INTERFACE
    #$<BUILD_INTERFACE:${PSA_CRYPTO_CONFIG_INTERFACE_PATH}>
    ${PSA_CRYPTO_CONFIG_INTERFACE_PATH}
    ${NRF_SECURITY_ROOT}/include
)

# Add include folders for psa_crypto_library_config (library build in S-only and inside TF-M)
target_include_directories(psa_crypto_library_config
  INTERFACE
    ${PSA_CRYPTO_CONFIG_LIBRARY_PATH}
)

# # Suspect: Write something about NCSDK-YYYYY
# if(CONFIG_MBEDTLS_PSA_CRYPTO_SPM)
#   # In order to support FPU in TF-M the following is documented by the TF-M
#   # build system:
#   #
#   #   Secure and non-secure libraries are compiled with COMPILER_CP_FLAG and
#   #   linked with LINKER_CP_OPTION for different FP ABI types. All those
#   #   libraries shall be built with COMPILER_CP_FLAG
#   target_compile_options(tfm_sprt
#     INTERFACE
#       ${COMPILER_CP_FLAG}
#   )

#   target_link_options(tfm_sprt
#     INTERFACE
#       ${LINKER_CP_OPTION}
#   )
# endif()

if(CONFIG_MBEDTLS_ENABLE_HEAP)
  if (CONFIG_BUILD_WITH_TFM)
    # Add replacement for memory_buffer_alloc.c for NS build
    list(APPEND src_crypto ${NRF_SECURITY_ROOT}/src/legacy/memory_buffer_alloc.c)
  else()
    # Both secure only builds and TF-M builds use the implementation from MbedTLS.
    # This currently doesn't do a mutex on heap access.
    list(APPEND src_crypto ${ARM_MBEDTLS_PATH}/library/memory_buffer_alloc.c)
  endif()
endif()

if(NOT CONFIG_MBEDTLS_PSA_CRYPTO_SPM)
  append_with_prefix(src_crypto ${ARM_MBEDTLS_PATH}/library
    pem.c
    pkcs12.c
    pkcs5.c
    pkparse.c
    pkwrite.c
  )
endif()

# Library for mbed TLS crypto toolbox functionality
add_library(${mbedcrypto_target}
  STATIC
    ${src_crypto}
)

if(CONFIG_PSA_SSF_CRYPTO_CLIENT)
  add_subdirectory(ssf_secdom)
endif()

nrf_security_add_zephyr_options(${mbedcrypto_target})

# Base mbed TLS files (not in drivers or builtin's)
append_with_prefix(src_crypto_base ${ARM_MBEDTLS_PATH}/library
  asn1parse.c
  asn1write.c
  base64.c
  bignum.c
  bignum_core.c
  nist_kw.c
  oid.c
  padlock.c
  version.c
  constant_time.c
)

# Add base library with files required by all drivers/backends.
add_library(mbedcrypto_base
  STATIC
    ${src_crypto_base}
)

target_link_libraries(mbedcrypto_base
  PUBLIC
    # Enable the PSA crypto (client) interface or the library build
    $<IF:$<BOOL:${CONFIG_MBEDTLS_PSA_CRYPTO_C}>,psa_crypto_library_config,psa_crypto_config>
    psa_interface
)

# Misusing the psa_crypto_config and psa_crypto_library_config awareness to 
# set compiler-flags to ensure right floating-point types are set
if(COMPILER_CP_FLAG)
  target_compile_options(psa_crypto_config
    INTERFACE
      ${COMPILER_CP_FLAG}
  )

  target_compile_options(psa_crypto_library_config
    INTERFACE
      ${COMPILER_CP_FLAG}
  )
endif()

# Misusing the psa_crypto_config and psa_crypto_library_config awareness to 
# set linker-options to ensure right floating-point types are set
if(LINKER_CP_OPTION)
  target_link_options(psa_crypto_config
    INTERFACE
      ${LINKER_CP_OPTION}
  )

  target_link_options(psa_crypto_library_config
  INTERFACE
    ${LINKER_CP_OPTION}
)
endif()

target_link_libraries(${mbedcrypto_target}
  PRIVATE
    mbedcrypto_base
)

# Add a public version of the configs includes and interface
target_link_libraries(${mbedcrypto_target}
  PRIVATE
    $<IF:$<BOOL:${CONFIG_MBEDTLS_PSA_CRYPTO_C}>,psa_crypto_library_config,psa_crypto_config>
    psa_interface
)

target_compile_options(${mbedcrypto_target} PRIVATE
  # Don't be too strict with warnings on mbedtls code. This code is not
  # ours, so it's not necessary to do too much static analysis on
  # it. And any warnings that do pop up are difficult to fix as they
  # require changes far upstream.
  -Wno-unused-function
  -Wno-unused-variable
  # Disable warnings showing up in Oberon PSA crypto code.
  -Wno-stringop-overflow
  -Wno-stringop-overread
  -Wno-strict-aliasing
  )

add_subdirectory(core)

# Add drivers if enabled
add_subdirectory(drivers)

# Add legacy mbed TLS APIs
add_subdirectory(legacy)

# Print all files in the mbedcrypto_target (with optional legacy-additions)
nrf_security_debug_list_target_files(${mbedcrypto_target})

# In TF-M build, a psa_interface lib is created and we must inherit its settings
set_property(TARGET ${mbedcrypto_target}
  APPEND PROPERTY
    PRIVATE_LINK_LIBRARIES
      $<TARGET_NAME_IF_EXISTS:psa_interface>
)

# NEWLIB requires linking with the C library
if (CONFIG_NEWLIB_LIBC)
  target_link_libraries(${mbedcrypto_target} PRIVATE -lc)
  target_link_libraries(mbedcrypto_base PRIVATE -lc)
endif()

if (CONFIG_MBEDTLS_X509_LIBRARY)
  append_with_prefix(src_x509 ${ARM_MBEDTLS_PATH}/library
    x509.c
    x509_create.c
    x509_crl.c
    x509_crt.c
    x509_csr.c
    x509write.c
    x509write_crt.c
    x509write_csr.c
  )

  add_library(${mbedx509_target} STATIC
    ${src_x509}
  )

  # Add options from Zephyr build
  nrf_security_add_zephyr_options(${mbedx509_target})

  target_link_libraries(${mbedx509_target}
    PRIVATE
      ${mbedcrypto_target}
      mbedcrypto_base
  )
endif()

# Library for TLS protocol support
if (CONFIG_MBEDTLS_TLS_LIBRARY)
  # TLS files
  append_with_prefix(src_tls ${ARM_MBEDTLS_PATH}/library
    debug.c
    net_sockets.c
    ssl_cache.c
    ssl_ciphersuites.c
    ssl_client.c
    ssl_cookie.c
    ssl_msg.c
    ssl_ticket.c
    ssl_tls.c
    ssl_tls12_client.c
    ssl_tls12_server.c
    ssl_tls13_keys.c
    ssl_tls13_server.c
    ssl_tls13_client.c
    ssl_tls13_generic.c
  )

  if (CONFIG_MBEDTLS_DEBUG)
	list(APPEND src_tls
	  ${ARM_MBEDTLS_PATH}/library/ssl_debug_helpers_generated.c
	)
  endif()

  add_library(${mbedtls_target} STATIC
    ${src_tls}
  )

  # Add options from Zephyr build
  nrf_security_add_zephyr_options(${mbedtls_target})

  target_link_libraries(${mbedtls_target}
    PRIVATE
      ${mbedx509_target}
      ${mbedcrypto_target}
      mbedcrypto_base
  )
endif()

if (NOT CONFIG_MBEDTLS_PSA_CRYPTO_SPM)
  # Add zephyr-specific code
  add_subdirectory(zephyr)
endif()
